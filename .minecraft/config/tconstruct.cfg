# Configuration file

~CONFIG_VERSION: 0.1

clientside {
    # If true, all of Tinkers' blocks with contents (tables, basin, drying racks,...) will render their contents in the world.
    B:renderInventoryInWorld=true

    # If true, use a null render layer when building the models to render tables. Fixes an issue with chisel, but the config is provide in case it breaks something.
    B:renderInventoryNullLayer=true

    # If true, tools will show additional info in their tooltips.
    B:extraTooltips=true

    # If true, all variants of the different tables will be listed in creative. Set to false to only have the oak variant for all tables.
    B:listAllTables=true

    # If true, all material variants of the different tools will be listed in creative. Set to false to only have the first found material for all tools (usually wood).
    B:listAllToolMaterials=true

    # If true, all material variants of the different parts will be listed in creative. Set to false to only have the first found material for all parts (usually wood).
    B:listAllPartMaterials=true

    # If true, temperatures in the smeltery and in JEI will display in celsius. If false they will use the internal units of Kelvin, which may be better for devs.
    B:temperatureCelsius=true

    # If true, tools will enable the forge bucket model on startup and then turn itself off. This is only there so that a fresh install gets the buckets turned on by default.
    B:enableForgeBucketModel=false

    # REQUIRES DEBUG MODULE. Will do nothing if debug module is disabled. If true the texture map will be dumped into the run directory, just like old forge did.
    B:dumpTextureMap=false
}


gameplay {
    # Fortune increases drops after harvesting a block with autosmelt.
    B:AutosmeltFortuneInteraction=true

    # Adds a recipe that allows you to craft 3 gravel into a flint.
    B:addFlintRecipe=true

    # Adds a recipe that allows you to get leather from drying cooked meat.
    B:addLeatherDryingRecipe=true

    # Allows the creation of bricks from molten clay.
    B:allowBrickCasting=true

    # If true, casting recipes for blocks will be generated.
    B:castingBlock=true

    # If true, casting recipes for casts will be generated.
    B:castingCast=true

    # If true, casting recipes for gears will be generated.
    B:castingGear=false

    # If true, casting recipes for ingots will be generated.
    B:castingIngot=true

    # If true, casting recipes for nuggets will be generated.
    B:castingNugget=true

    # If true, casting recipes for plates will be generated.
    B:castingPlate=false

    # If true, casting recipes for toolparts will be generated.
    B:castingToolpart=false

    # Pattern and Part chests keep their inventory when harvested.
    B:chestsKeepInventory=true

    # If true, clear glass can only be harvested with silk touch like regular glass.
    B:clearGlassSilkTouch=true

    # Allows to craft all tool parts of all materials in the part builder, including materials that normally have to be cast with a smeltery.
    B:craftCastableMaterials=false

    # Blacklist of registry names or TE classnames for the crafting station to connect to. Mainly for compatibility.
    S:craftingStationBlacklist <
        de.ellpeck.actuallyadditions.mod.tile.TileEntityItemViewer
     >

    # Adds single-use clay casts.
    B:enableClayCasts=false

    # If true, piggybackpacks can only pick up players and mobs that can be leashed in vanilla. If false any mob can be picked up.
    B:limitPiggybackpack=false

    # If true, requires slimeballs in the vanilla slimeblock recipe to match in color, otherwise gives a pink slimeblock.
    B:matchVanillaSlimeblock=false

    # If true, melting recipes based on the ore dictionary will be generated.
    B:meltingOreDict=true

    # If true, melting recipes for toolparts will be generated.
    B:meltingToolpart=true

    # Allows the creation of obsidian in the smeltery, using a bucket of lava and water.
    B:obsidianAlloy=false

    # Preferred mod ID for oredictionary outputs. Top most mod ID will be the preferred output ID, and if none is found the first output stack is used.
    S:orePreference <
        minecraft
        tconstruct
        thermalfoundation
        forestry
        immersiveengineering
        embers
        ic2
     >
    D:oreToIngotRatio=1.0

    # List of items to ignore when generating melting recipes from the crafting registry. For example, ignoring sticks allows metal pickaxes to melt down.
    # Format: oreName or modid:item[:meta]. If meta is unset, uses wildcard.
    S:oredictMeltingIgnore <
        dustRedstone
        plankWood
        stickWood
        stickTreatedWood
        string
        minecraft:chest:0
     >

    # Enables all items, even if the Module needed to obtain them is not active.
    B:registerAllItems=false

    # Allows to reuse stencils in the stencil table to turn them into other stencils.
    B:reuseStencils=true

    # Players who enter the world for the first time get a Tinkers' Book.
    B:spawnWithBook=true

    # REQUIRES DEBUG MODULE. Tests all IMC integrations with dummy recipes. May significantly impact gameplay, so its advised you disable this outside of dev environements.
    B:testIMC=false
}


values {
    # How much blocks are "worth", this value is used for melting.
    I:blockValue=1296

    # How much blocks are "worth", this value is used for cost calculation and casting.
    I:blockValueCasting=1296

    # How much fragments are "worth", this value is used for both liquid conversion as well as part crafting.
    I:fragmentValue=36

    # How much gears are "worth", this value is used for melting.
    I:gearValue=576

    # How much gears are "worth", this value is used for cost calculation and casting.
    I:gearValueCasting=576

    # How much gems are "worth", this value is used for both liquid conversion as well as part crafting.
    I:gemValue=864

    # How much ingots are "worth", this value is used for melting.
    I:ingotValue=144

    # How much ingots are "worth", this value is used for cost calculation and casting.
    I:ingotValueCasting=144

    # How much nuggets are "worth", this value is used for melting.
    I:nuggetValue=16

    # How much nuggets are "worth", this value is used for cost calculation and casting.
    I:nuggetValueCasting=16

    # Determines the ratio of ore to ingot, or in other words how many ingots you get out of an ore. This ratio applies to all ores (including poor and dense). The ratio can be any decimal, including 1.5 and the like, but can't go below 1. THIS ALSO AFFECTS MELTING TEMPERATURE!
    D:oreToIngotRatio=1.0

    # How much plates are "worth", this value is used for melting.
    I:plateValue=144

    # How much plates are "worth", this value is used for cost calculation and casting.
    I:plateValueCasting=144

    # How much shards are "worth", this value is used for both liquid conversion as well as part crafting.
    I:shardValue=72
}


worldgen {
    # If true, slime islands will generate.
    B:generateSlimeIslands=true

    # If true, slime islands generate in superflat worlds.
    B:generateIslandsInSuperflat=false

    # One in every X chunks will contain a slime island.
    I:slimeIslandRate=730

    # One in every X chunks will contain a magma island in the nether.
    I:magmaIslandRate=100

    # Prevents generation of slime islands in the listed dimensions.
    I:slimeIslandBlacklist <
        -1
        1
     >

    # If false, slime islands only generate in dimensions which are of type surface. This means they won't generate in modded cave dimensions like the Deep Dark. Note that the name of this property is inverted: It must be set to false to prevent slime islands from generating in non-surface dimensions.
    B:slimeIslandsOnlyGenerateInSurfaceWorlds=true

    # If true, cobalt ore will generate in the nether.
    B:genCobalt=true

    # If true, ardite ore will generate in the nether.
    B:genArdite=true

    # Approximate ores per chunk.
    I:cobaltRate=20
    I:arditeRate=20
}


